// SOAL 6.1

// 1. Buatlah Procedure untuk mengupdate harga_jual berdasarkan jenis produk tertentu (jenis_produk_id), 
//    beri nama procedure pro_naikan_harga memiliki parameter yang akan menerima argumen: Jenis Produk ID dan Persentase kenaikan harga.

DELIMITER $$

CREATE PROCEDURE pro_naik(
IN jenis_produk INT,
IN persentasi_kenaikan INT )
BEGIN
UPDATE produk SET harga_jual = harga_jual + (harga_jual * persentasi_kenaikan / 100)
WHERE jenis_produk_id = jenis_produk;
END $$

DELIMITER ;

CALL pro_naik(1,4);

SELECT nama, harga_jual, jenis_produk_id FROM produk;

CALL pro_naik(5,4);

SELECT nama, harga_jual, jenis_produk_id FROM produk;

// 2. Buat fungsi umur dengan parameter yang menerima inputan argumen tipe data date 
//    dan mengembalikan hasil perhitungan umur (tahun sekarang dikurang tahun inputan) dengan tipe data bilangan bulat (integer) positif.

DELIMITER $$

CREATE FUNCTION umur(tgl_lahir DATE)
RETURNS INT
BEGIN
DECLARE umur INT;
SET umur = YEAR(CURDATE()) - YEAR(tgl_lahir);
RETURN umur;
END $$

DELIMITER ;

SELECT * FROM pelanggan;

SELECT kode, nama, jk, umur(tgl_lahir) AS umur FROM pelanggan;

// 3.	Buat fungsi kategori_harga dengan parameter yang menerima inputan argument tipe data double dan mengembalikan tipe data string kategori harga berdasarkan: 
// ●	0 – 500rb : murah
// ●	500rb – 3 juta : sedang
// ●	3jt – 10 juta : mahal 
// ●	> 10 juta : sangat mahal

DELIMITER $$

CREATE FUNCTION kategori_harga(harga DOUBLE)
RETURNS VARCHAR(20)
BEGIN
DECLARE kategori VARCHAR(20);

IF harga >= 0 AND harga <= 500000 THEN
    SET kategori = 'murah';
ELSEIF harga >= 500000 AND harga <= 3000000 THEN
    SET kategori = 'sedang';
ELSEIF harga >= 3000000 AND harga <= 10000000 THEN
    SET kategori = 'mahal';
ELSEIF harga >= 10000000 THEN
    SET kategori = 'sangat mahal';
ELSE
    SET kategori = '';
END IF;

  RETURN kategori;
END$$

DELIMITER ;

SELECT kategori_harga(450);

SELECT kategori_harga(1500);

SELECT kategori_harga(7500);

SELECT kategori_harga(15000);


Soal 6.2

// Trigger

/// 1. Buatlah bisnis proses pembayaran dengan menggunakan trigers, dengan skenario sebagai berikut :
//    - pelanggan memesan didalam table pesanan 
//    - dilanjutkan dengan proses pembayaran di table pembayaran
//    - didalam table pembayaran tambahkan kolom status_pembayaran
//    - jika pesanan sudah dibayar maka status pembayaran akan berubah menjadi lunas 

// 1. Pelanggan memesan didalam table pesanan
SELECT * FROM pesanan;

// Tampilkan Tabel pesanan_items
SELECT * FROM pesanan_items;

// 3. Dilanjutkan dengan proses pembayaran di table pembayaran
ALTER TABLE pembayaran ADD status_pembayaran varchar(25);

// menampilkan Tabel
desc pembayaran;

// 2. Dilanjutkan dengan proses pembayaran di table pembayaran
DELIMITER $$

CREATE TRIGGER cek_pembayaran BEFORE INSERT ON pembayaran
FOR EACH ROW
BEGIN
DECLARE total_bayar DECIMAL(10, 2);
DECLARE total_pesanan DECIMAL(10, 2);
SELECT SUM(jumlah) INTO total_bayar FROM pembayaran WHERE pesanan_id = NEW.pesanan_id;
SELECT total INTO total_pesanan FROM pesanan WHERE id = NEW.pesanan_id;

// 4. Jika pesanan sudah dibayar maka status pembayaran akan berubah menjadi lunas

IF total_bayar + NEW.jumlah >= total_pesanan THEN
SET NEW.status_pembayaran = 'Lunas';
END IF;
END $$

DELIMITER ;

//
SELECT * FROM pembayaran;

//
SELECT * FROM pesanan;

// Menambahkan data pada tabel pembayaran
INSERT INTO pembayaran (nokuitansi, tanggal, jumlah, ke, pesanan_id, status_pembayaran)
VALUES ('KDI001', '2023-05-01', 3500000, 1, 8, '');

//
SELECT * FROM pembayaran;

//
INSERT INTO pembayaran (nokuitansi, tanggal, jumlah, ke, pesanan_id, status_pembayaran)
VALUES ('KDY003', '2023-04-02', 3500, 1, 2, '');

//
SELECT * FROM pembayaran;

//
INSERT INTO pembayaran (nokuitansi, tanggal, jumlah, ke, pesanan_id, status_pembayaran)
VALUES ('KGY003', '2025-02-01', 30000, 1, 2, '');

//
SELECT * FROM pembayaran;

// = = = = =

//
SELECT nama, stok FROM produk;

//
SELECT * FROM pesanan_items;

/// 2. Buatlah Stored Procedure dengan nama kurangi_stok untuk mengurangi stok produk. Stok berkurang sesuai dengan jumlah pesanan produk.

DELIMITER $$

CREATE PROCEDURE kurangi_stok(
IN stok DOUBLE, IN qty DOUBLE, IN hasil DOUBLE)
BEGIN
SET hasil = stok - qty WHERE id = produk_id;
END$$

DELIMITER ;

CALL kurangi_stok(1);

/// 3. Buatlah Trigger dengan nama trig_kurangi_stok yang akan mengurangi stok produk jika terjadi transaksi pesanan oleh pelanggan (memanggil stored procedure kurangi_stok soal no 1).
//    Trigger ini aktif setelah trigger after_pesanan_items_insert (trigger pada contoh 3).

DELIMITER $$

CREATE TRIGGER trig_kurangi_stok AFTER INSERT ON pesanan
FOR EACH ROW
BEGIN
DECLARE produk_id INT;
DECLARE qty INT;
SET produk_id = NEW.produk_id;
SET qty = NEW.jumlah;  
END$$

DELIMITER ;

CALL kurangi_stok(produk_id, qty);